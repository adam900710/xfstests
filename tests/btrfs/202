#! /bin/bash
# FS QA Test 202
#
# Btrfs per inode dedupe flag test
#
#-----------------------------------------------------------------------
# Copyright (c) 2016 Fujitsu.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/defrag

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs btrfs
_supported_os Linux
_require_scratch
_require_btrfs_subcommand dedupe
_require_btrfs_subcommand property
_require_btrfs_fs_feature dedupe
_require_btrfs_mkfs_feature dedupe

# File size is twice the maximum file extent of btrfs
# So even fallbacked to non-dedupe, it will have at least 2 extents
file_size=256m
dedupe_bs=64k

_scratch_mkfs "-O dedupe" >> $seqres.full 2>&1
_scratch_mount

# Return 0 for not deduped at all , return 1 for part or full deduped
test_file_deduped () {
	file=$1

	nr_uniq_extents=$(_extent_count_uniq $file)
	nr_total_extents=$(_extent_count $file)

	if [ $nr_uniq_extents -eq $nr_total_extents ]; then
		echo "$file: not de-duplicated"
	else
		echo "$file: de-duplicated"
	fi
}

_run_btrfs_util_prog dedupe enable -b $dedupe_bs $SCRATCH_MNT
touch $SCRATCH_MNT/dedupe_file
touch $SCRATCH_MNT/no_dedupe_file
mkdir $SCRATCH_MNT/dedupe_dir
mkdir $SCRATCH_MNT/no_dedupe_dir

_run_btrfs_util_prog property set $SCRATCH_MNT/no_dedupe_file dedupe disable
_run_btrfs_util_prog property set $SCRATCH_MNT/no_dedupe_dir dedupe disable

# use fsync write to ensure hash is added to dedupe pool
$XFS_IO_PROG -f -c "pwrite -b $dedupe_bs 0 $dedupe_bs" -c "fsync" \
	$SCRATCH_MNT/tmp | _filter_xfs_io

$XFS_IO_PROG -f -c "pwrite -b $dedupe_bs 0 $file_size" \
	$SCRATCH_MNT/dedupe_file | _filter_xfs_io
$XFS_IO_PROG -f -c "pwrite -b $dedupe_bs 0 $file_size" \
	$SCRATCH_MNT/no_dedupe_file | _filter_xfs_io
$XFS_IO_PROG -f -c "pwrite -b $dedupe_bs 0 $file_size" \
	$SCRATCH_MNT/dedupe_dir/default_file | _filter_xfs_io
$XFS_IO_PROG -f -c "pwrite -b $dedupe_bs 0 $file_size" \
	$SCRATCH_MNT/no_dedupe_dir/default_file | _filter_xfs_io

test_file_deduped $SCRATCH_MNT/dedupe_file | _filter_scratch
test_file_deduped $SCRATCH_MNT/no_dedupe_file | _filter_scratch
test_file_deduped $SCRATCH_MNT/dedupe_dir/default_file | _filter_scratch
test_file_deduped $SCRATCH_MNT/no_dedupe_dir/default_file | _filter_scratch

# success, all done
status=0
exit
