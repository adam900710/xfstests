#! /bin/bash
# FS QA Test 203
#
# Btrfs reflink with balance concurrency test
#
#-----------------------------------------------------------------------
# Copyright (c) 2016 Fujitsu.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	kill $populate_pid &> /dev/null
	kill $balance_pid &> /dev/null
	wait
	# Check later comment for reason
	$BTRFS_UTIL_PROG balance cancel $SCRATCH_MNT &> /dev/null
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs btrfs
_supported_os Linux
_require_scratch
_require_cp_reflink
_require_btrfs_subcommand dedup
_require_btrfs_fs_feature dedup
_require_btrfs_mkfs_feature dedup

dedup_bs=128k
file_size_in_kilo=4096
init_file=$SCRATCH_MNT/foo
run_time=$((60 * $TIME_FACTOR))

_scratch_mkfs "-O dedup" >> $seqres.full 2>&1
_scratch_mount

do_dedup_balance_test()
{
	backend=$1
	_run_btrfs_util_prog dedup enable -b $dedup_bs -s $backend $SCRATCH_MNT

	# create the initial file and fill hash pool
	$XFS_IO_PROG -f -c "pwrite -S 0x0 -b $dedup_bs 0 $dedup_bs" -c "fsync" \
		$init_file | _filter_xfs_io

	_btrfs_stress_balance $SCRATCH_MNT >/dev/null 2>&1 &
	balance_pid=$!

	# Populate fs with all 0 data, to trigger enough in-band dedup work
	# to race with balance
	_populate_fs -n 5 -f 10000000 -d 1 -r $SCRATCH_MNT \
		-s $file_size_in_kilo &> /dev/null &
	populate_pid=$!

	sleep $run_time

	kill $populate_pid
	kill $balance_pid
	wait

	# Sometimes even we killed $balance_pid and wait returned,
	# balance may still be running, use balance cancel to wait it.
	# As this is just a workaround, we don't want it pollute seqres
	# so call $BTRFS_UTIL_PROG directly
	$BTRFS_UTIL_PROG balance cancel $SCRATCH_MNT &> /dev/null

	rm $SCRATCH_MNT/* -rf &> /dev/null
	_run_btrfs_util_prog dedup disable $SCRATCH_MNT
}

do_dedup_balance_test inmemory
do_dedup_balance_test ondisk

# success, all done
status=0
exit
